---
title: "Probability Theory and Random Variables"
format:
  html:
    code-fold: true
jupyter: python3
editor:
  render-on-save: true
---


```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.metrics import r2_score
from sklearn.cluster import KMeans


happy_csv = 'https://raw.githubusercontent.com/erica16/ml1_blogs/main/data/happiness-cantril-ladder.csv'
renew_csv = 'https://raw.githubusercontent.com/erica16/ml1_blogs/main/data/renewable-share-energy.csv'
percent_renew_csv = 'https://raw.githubusercontent.com/erica16/ml1_blogs/main/data/modern-renewable-energy-consumption.csv'

# read in datasets
happy_df = pd.read_csv(happy_csv)
renew_df = pd.read_csv(renew_csv)
percent_renew_df = pd.read_csv(percent_renew_csv)

# takes row in the renewable energy consumption breakdown datatable and turns each data column
# into a percent value rounded to the nearest 100ths decimal place.
def calculate_percentages(row):
    other = row[3]
    solar = row[4]
    wind = row[5]
    hydro = row[6]
    total = other + wind + solar + hydro
    if (total == 0):
        return pd.Series([0, 0, 0, 0])
    else:
        return pd.Series(
            [(other/total) * 100, 
            (solar/total) * 100, 
            (wind/total) * 100, 
            (hydro/total) * 100
            ])

# clean data
percent_renew_df[['Other', 'Solar', 'Wind', 'Hydro']] = percent_renew_df.apply(calculate_percentages, axis=1)
percent_renew_clean = percent_renew_df.filter(['Entity', 'Year', 'Other', 'Solar', 'Wind', 'Hydro'])
percent_renew_clean['Largest Renewable Source'] = percent_renew_clean[['Other', 'Solar', 'Wind', 'Hydro']].idxmax(axis=1)
happy_df_rename = happy_df.rename(columns={'Cantril ladder score':'Happiness Score'})
renew_df_rename = renew_df.rename(columns={renew_df.columns[3]:'Percent Renewable Energy'})

print(percent_renew_clean)

# filter to after 2010
happy_years = happy_df_rename.loc[happy_df_rename['Year'] > 2020]
renew_years = renew_df_rename.loc[renew_df_rename['Year']> 2020]
percent_renew_years = percent_renew_clean.loc[percent_renew_clean['Year'] > 2020]

# merge dfs on country
happy_renew_df = happy_years.merge(renew_years, on='Entity')

all_df = happy_renew_df.merge(percent_renew_years, on='Entity')

all_xy = all_df.filter(['Happiness Score', 'Percent Renewable Energy', 'Solar', 'Wind', 'Hydro', 'Other', 'Largest Renewable Source'])

sns.scatterplot(data=all_xy, x='Percent Renewable Energy', y='Happiness Score', s=12, hue='Largest Renewable Source')
plt.show()


```

```{python}

```
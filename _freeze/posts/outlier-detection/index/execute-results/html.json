{
  "hash": "9bca85d1868c26672a9f8a50c9170310",
  "result": {
    "markdown": "---\ntitle: Quarto Basics\nformat:\n  html:\n    code-fold: true\neditor:\n  render-on-save: true\n---\n\n# Anomaly/Outlier Detection\n## On the correlation between CO2 Emissions and Economic Inequality metric by country\nAs someone who majored in Environmental Informatics for my undergrad at Virginia Tech, exploring climate data and its relationship to non-climate datasets is something that I am familiar with and very passionate about. I wanted to make sure I had a set of data to use for a study on anomaly and outlier detection that would show a strong correlation between the two variables, but maybe not one that would come straight to mind for the average person. I had a hunch that the Inequality index for a country and the CO2 emissions for a country might be correlated, so I found a C02 emissions dataset from <https://www.kaggle.com/datasets/ankanhore545/carbon-dioxide-emissions-of-the-world> and an Economic Inequality dataset from <https://ourworldindata.org/economic-inequality>.\n\n## What are these variables?\n**C02**, or carbon dioxide, is one of the primary greenhouse gases responsible for driving climate change. As a greenhouse gas, its presence traps infrared radiation (heat) in the atmosphere which keeps earth comfortable in natural amounts but is detrimental when the amounts are much higher than they would normally be due to human-caused spikes in CO2 emissions. Massive increases in carbon dioxide emissions are primarily due to burning fossil fuels and other biomass-based fuels for energy used in industrial, housing, and transportation settings, and large changes in land use patterns.\n**Income Inequality** per country is measured with the **Gini Coefficient**, which is a measure of the income inequality from 0 to 1 where 0 is perfect income equality and 1 is the maximal inequality. It helps assess how evenly or unevenly the wealth in a population is distributed. It is calculated by measuring a value like income on a frequency distribution, where a 45 degree angle would indicate perfect wealth distribution.\n\n## Step 1: Clean data and view the basic scatterplot\nThe first thing to do after downloading the datasets and hosting them on my git repo was to explore the data, and the best way to do that is to get it onto a visualization. Before being able to visualize it though, the data needs to be cleaned - in this case, that means removing rows without useable data and making the dataframes easier to use by filtering out unnecessary columns. After the data is presentable in two separate dataframes, it needs to be merged into the same dataframe so that it can be graphed. I merged the CO2 Emissions dataframe and the Income Inequality index dataframe on Country after filtering for just rows in the Inequality dataframe where the year was 2018. I chose 2018 because it was the most recent year with data in both datasets.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.cluster import KMeans\n\nemissions_csv = 'https://raw.githubusercontent.com/erica16/ml1_blogs/main/data/historical_emissions.csv'\ninequality_csv ='https://raw.githubusercontent.com/erica16/ml1_blogs/main/data/inequality.csv'\n\n#read in datasets\nemissions_df = pd.read_csv(emissions_csv)\ninequality_df = pd.read_csv(inequality_csv)\n\n#clean data\ninequality_filtered = inequality_df.filter(['Country', 'Year', 'Gini coefficient (before tax) (World Inequality Database)'])\n\nprint(emissions_df.info())\n\n#filter to 2018\ninequality_2018 = inequality_filtered.loc[inequality_filtered['Year'] == 2018]\nprint(inequality_2018.info())\n\n#merge dfs on country\ninequality_emissions_df = inequality_2018.merge(emissions_df, on='Country')\nin_em_nums = inequality_emissions_df.select_dtypes(include=[np.number])\nimputer = SimpleImputer(strategy=\"median\")\nimputer.fit(in_em_nums)\nin_em_imputed = imputer.transform(in_em_nums)\ninequality_emissions_df[in_em_nums.columns] = in_em_imputed\n\n\n# Visualize the data\nsns.scatterplot(data=inequality_emissions_df, x='Gini coefficient (before tax) (World Inequality Database)' ,y='2018')\nplt.xlabel('Inequality index (Gini Coefficient, before tax)')\nplt.ylabel('CO2 Emissions in MtCO₂e')\nplt.title('Correlation between CO2 Emissions and Inequality metric by Country in 2018')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 195 entries, 0 to 194\nData columns (total 34 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   Country      195 non-null    object \n 1   Data source  195 non-null    object \n 2   Sector       195 non-null    object \n 3   Gas          195 non-null    object \n 4   Unit         195 non-null    object \n 5   2018         195 non-null    float64\n 6   2017         195 non-null    float64\n 7   2016         195 non-null    float64\n 8   2015         195 non-null    float64\n 9   2014         195 non-null    float64\n 10  2013         195 non-null    float64\n 11  2012         195 non-null    float64\n 12  2011         195 non-null    float64\n 13  2010         195 non-null    float64\n 14  2009         195 non-null    float64\n 15  2008         195 non-null    float64\n 16  2007         195 non-null    float64\n 17  2006         195 non-null    float64\n 18  2005         195 non-null    float64\n 19  2004         195 non-null    float64\n 20  2003         195 non-null    float64\n 21  2002         195 non-null    float64\n 22  2001         195 non-null    float64\n 23  2000         195 non-null    float64\n 24  1999         195 non-null    float64\n 25  1998         195 non-null    float64\n 26  1997         195 non-null    float64\n 27  1996         195 non-null    float64\n 28  1995         195 non-null    float64\n 29  1994         195 non-null    float64\n 30  1993         195 non-null    float64\n 31  1992         195 non-null    float64\n 32  1991         195 non-null    float64\n 33  1990         194 non-null    float64\ndtypes: float64(29), object(5)\nmemory usage: 51.9+ KB\nNone\n<class 'pandas.core.frame.DataFrame'>\nIndex: 210 entries, 38 to 9923\nData columns (total 3 columns):\n #   Column                                                     Non-Null Count  Dtype  \n---  ------                                                     --------------  -----  \n 0   Country                                                    210 non-null    object \n 1   Year                                                       210 non-null    int64  \n 2   Gini coefficient (before tax) (World Inequality Database)  80 non-null     float64\ndtypes: float64(1), int64(1), object(1)\nmemory usage: 6.6+ KB\nNone\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-2.png){width=660 height=449}\n:::\n:::\n\n\n## Step 2: Evaluate scatterplot findings\nLooking at this scatterplot, 2 things are immediately obvious: the first is that almost all the points are clustered towards the bottom of the Y axis, but are clustered nonetheless, and the second is that there is one visually obvious outlier and one point that could be an outlier but requires further investigation. \n\n## Step 3: K-means clustering to determine outliers\nIn order to decide which of these points are truly outliers, I will use a K-means cluster with only 2 clusters, and the outcome will show the majority of the dataset in one cluster and the outliers in the other cluster.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# k-means clusterer\nineq_emiss_np = np.array(inequality_emissions_df[['Gini coefficient (before tax) (World Inequality Database)', '2018']])\n\nk = 2\nkmeans = KMeans(n_clusters=k, random_state=42)\ny_pred = kmeans.fit_predict(ineq_emiss_np)\n\n# plot decision boundaries\nmins = ineq_emiss_np.min(axis=0) - 0.1\nmaxs = ineq_emiss_np.max(axis=0) + 0.1\nxx, yy = np.meshgrid(np.linspace(mins[0], maxs[0], 1000),\n                      np.linspace(mins[1], maxs[1], 1000))\nZ = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\n\nplt.contourf(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n            cmap='Set3')\nplt.contour(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n            linewidths=1, colors='k')\n\n# plot data\nsns.scatterplot(data=inequality_emissions_df, x='Gini coefficient (before tax) (World Inequality Database)', y='2018', s = 100)\n\nplt.xlabel('Inequality index (Gini Coefficient, before tax)')\nplt.ylabel('CO2 Emissions in MtCO₂e')\nplt.title('Correlation between CO2 Emissions and Inequality metric by Country in 2018')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Erica\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-2.png){width=660 height=449}\n:::\n:::\n\n\nBased on this graph, the yellow cluster at the top holds the single outlier for the dataset, while the bottom turquoise cluster holds the valid data for the dataset, including the two points we weren't totally sure were going to be part of the valid dataset. This goes to show that a machine learning algorithm is a great way to determine what points are outliers, especially when it is dubious upon visual inspection. If we want to be a little bit more discerning with the outlier detection, we could try for 3 clusters.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# k-means clusterer\nineq_emiss_np = np.array(inequality_emissions_df[['Gini coefficient (before tax) (World Inequality Database)', '2018']])\n\nk = 3\nkmeans = KMeans(n_clusters=k, random_state=42)\ny_pred = kmeans.fit_predict(ineq_emiss_np)\n\n# plot decision boundaries\nmins = ineq_emiss_np.min(axis=0) - 0.1\nmaxs = ineq_emiss_np.max(axis=0) + 0.1\nxx, yy = np.meshgrid(np.linspace(mins[0], maxs[0], 1000),\n                      np.linspace(mins[1], maxs[1], 1000))\nZ = kmeans.predict(np.c_[xx.ravel(), yy.ravel()])\nZ = Z.reshape(xx.shape)\n\nplt.contourf(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n            cmap='Set3')\nplt.contour(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n            linewidths=1, colors='k')\n\n# plot data\nsns.scatterplot(data=inequality_emissions_df, x='Gini coefficient (before tax) (World Inequality Database)', y='2018', s = 100)\n\nplt.xlabel('Inequality index (Gini Coefficient, before tax)')\nplt.ylabel('CO2 Emissions in MtCO₂e')\nplt.title('Correlation between CO2 Emissions and Inequality metric by Country in 2018')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Erica\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-2.png){width=660 height=449}\n:::\n:::\n\n\nHere we can see that the outlier from the two cluster graph is still in its own cluster, but the point second-furthest away from the majority of the group is now in its own cluster, and the point third-furthest away seems to be straddling the line between possible outlier and valid data point. The cluster containing the majority of the points is the one containing the valid data.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}
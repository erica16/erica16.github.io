{
  "hash": "64e409c58697fa6c90e209ba5c19158f",
  "result": {
    "markdown": "---\ntitle: Linear Regression\nformat:\n  html:\n    code-fold: true\neditor:\n  render-on-save: true\n---\n\n# Linear Regression\n## What is linear regression?\nA Linear regression is a way of displaying a predictive relationship between an independent variable and a dependent variable. It allows data scientists to calculate a line of best fit through the points displayed on a scatterplot, which can then be used to describe the relationship of the independent and dependent variable, in addition to allowing for prediction of a dependent variable value given an independent variable value.\n\n## About the data\nI am going to examine the relationship between months of job experience and salary, with job experience being the independent variable and salary being the dependent variable. My hypothesis is that as months of job experience increase, salary will also increase. My data source: https://www.kaggle.com/datasets/saquib7hussain/experience-salary-dataset\n\n## Step 1: import libraries and read in dataset to a pandas dataframe\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LinearRegression\n\nexp_csv = pd.read_csv('https://raw.githubusercontent.com/erica16/ml1_blogs/main/data/Experience-Salary.csv')\n```\n:::\n\n\n## Step 2: Perform linear regression\nSince I want to study the effect of experience on salary, X (the independent variable) will be experience in months, and y (the dependent variable) will be salary in thousands of dollars. Because I'm doing a linear regression, the first thing I do after taking a look at the information about the data is split the data up into training and testing sets using the scikit learn train_test_split method. After that, I fit the linear regression to the training data then predict y using the test set of x values. From there the only thing left to do is visualize the data using a scatterplot to show the whole dataset and a line to show the linear regression using the test x and predicted y.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# linear regression\nX = exp_csv['exp(in months)']\ny = exp_csv['salary(in thousands)']\n\nprint(exp_csv.info())\n\ntrain_set_X, test_set_X, train_set_y, test_set_y= train_test_split(np.array(X).reshape(-1, 1), y, test_size=0.2, random_state=42)\n\nlin_reg = LinearRegression()\nlin_reg.fit(train_set_X, train_set_y)\ny_pred = lin_reg.predict(test_set_X)\n\nsns.scatterplot(x=X, y=y)\nplt.plot(test_set_X, y_pred, color='red')\nplt.title('Salary in thousands vs Job Experience in months')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000 entries, 0 to 999\nData columns (total 2 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   exp(in months)        1000 non-null   float64\n 1   salary(in thousands)  1000 non-null   float64\ndtypes: float64(2)\nmemory usage: 15.8 KB\nNone\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-2.png){width=585 height=449}\n:::\n:::\n\n\n## Step 3: Check out the R-squared value\nThat line looks pretty well fit! To find out how well fit, we can take a look at the R-squared value:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(\"r-squared = {:.3f}\".format(r2_score(X, y)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nr-squared = 0.612\n```\n:::\n:::\n\n\nR-squared values range from 0 to 1, and generally in social science research a value between 0.50 and 0.99 is acceptable, according to [this link](https://mpra.ub.uni-muenchen.de/115769/1/MPRA_paper_115769.pdf). Therefore, this is a fairly good model! It could always be closer to 1, but that is for another blog.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}